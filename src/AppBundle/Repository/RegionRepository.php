<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Region;
use CrEOF\Spatial\PHP\Types\Geometry\Point;
use AppBundle\DBAL\Types\RegionType;


/**
 * RegionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegionRepository extends BaseRepository
{
    public function getOrCreateRegion($mapboxID, $name, $longitude, $latitude, $bboxRadius) 
    {
        $region = $this->findOneBy([
            'mapboxID' => $mapboxID,
        ]);
        
        if ($region === null) {
            $region = new Region();
        }
        
        $point = new Point($longitude, $latitude, 4326);
        
        $region->setName($name);
        $region->setText($this->extractTextFromName($name));
        $region->setType($this->extractTypeFromID($mapboxID));
        $region->setMapboxID($mapboxID);
        $region->setBboxRadius($bboxRadius);
        $region->setCoords($point);
        
        $this->add($region);
        $this->store();
        
        return $region;
    }
    
    private function extractTypeFromID($id) 
    {        
        return substr($id, 0, strpos($id, '.'));
    }
    
    private function extractTextFromName($name) 
    {        
        if (strpos($name, ',') === false) {
            return $name;
        }
        
        return substr($name, 0, strpos($name, ','));
    }
    
    /**
     * @return int
     */
    public function getCountryCount()
    {
        $qb = $this->getQB();
        $qb
            ->select('count(distinct r.name)')
            ->andWhere('r.type = :type')
            ->setParameter('type', RegionType::COUNTRY);

        $count = $qb->getQuery()->getSingleScalarResult();

        return $count;
    }
    
}
